#include <bits/stdc++.h>

using namespace std;

const int maxn = 305;

int n;
bool possible = false;
unordered_map<int, unordered_set<int> > mp;
vector<int> sol;

int diagonal(int i, int j)
{
	return n - (i - j);
}

void dfs(vector<int>& path, unordered_set<int>& _path, int len)
{
	if (len == 2 * n - 1)
	{
		sol = path;
		possible = true;
		return;
	}
	for (auto val: mp[len])
	{
		if (_path.count(val))
			continue;
		path.push_back(val);
		_path.insert(val);
		dfs(path, _path, len + 1);
		_path.erase(_path.find(val));
		path.pop_back();
	}
}

int main()
{
	scanf("%d", &n);
	for (int i = 0; i < n; i++)
		for (int j = 0; j < n; j++)
		{
			int val;
			scanf("%d", &val);
			mp[diagonal(i, j) - 1].insert(val);
		}
	vector<int> path;
	unordered_set<int> _path;
	dfs(path, _path, 0);
	if (possible)
	{
		printf("YES\n");
		for (auto s: sol)
			printf("%d ", s);
	}
	else
		printf("NO");
	return 0;
}
